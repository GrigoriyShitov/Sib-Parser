#include <iostream>
#include <stdint.h>
#include <string.h>
#include "GSMlib/Sibs.h"
#include "UMTSlib/build/UMTS.h"
#include "LTElib/build/LTE.h"

#define fbuf_size 1024
using namespace std;

uint8_t packet3g[] =
	{
		0x68, 0x0e, 0x20, 0xb7,
		0xc0, 0x82, 0x02, 0x05,
		0x07, 0x58, 0x44, 0x28,
		0x44, 0x40, 0x66, 0x43,
		0x24, 0x30, 0x81, 0x98,
		0x12, 0xb8, 0x6b, 0x48,
		0x01, 0x09, 0x16, 0x38,
		0x80, 0x10, 0x01};

uint8_t packet4G[] = {0x60, 0xc8, 0x20, 0x21,
                          0x90, 0x40, 0x43, 0x6b,
                          0x5a, 0x00, 0x9c, 0x80,
                          0x70, 0x2e, 0xa1, 0x10,
                          0x80, 0x84, 0x04, 0x21,
                          0x41, 0x11, 0x08, 0xdd,
                          0xc0};

uint8_t packet[fbuf_size] = {0x49, 0x06, 0x1b, 0x74, 
						  0x2e, 0x52, 0xf0, 0x10, 
						  0x00, 0xea, 0xc8, 0x00, 
						  0x50, 0x53, 0x65, 0x45, 
						  0x78, 0x00, 0x00, 0x80, 
						  0x00, 0xb0, 0x43}; // SIT 3
int main()
{

	GSMTAPPACK sib;
	size_t size = sizeof(packet);
	cout << size << endl;
	uint8_t *ptr = packet;
	// ����� ����� ��� ���� SIT �������
	sib.L2PseudoL = (*ptr++ & 0xFC) >> 2;
	sib.ProtDisc = *ptr & 0x0f;
	sib.SkipInd = *ptr & 0xf0;
	sib.MesType = *(++ptr);
	parse3G();
	parse4G();
	if (sib.MesType == SYSTEM_INFORMATION_TYPE_1)
	{

		Sib1Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_2)
	{
		Sib2Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_2bis)
	{
		Sib2bisPack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_2ter)
	{ // �������� rest octets
		Sib2terPack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_3)
	{ // �������� rest octets
		Sib3Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_4)
	{ // �������� rest octets
		Sib4Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_5)
	{
		Sib5Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_5bis)
	{
		Sib5bisPack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_5ter)
	{
		Sib5terPack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_6)
	{
		Sib6Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}

	return 0;
}

	//other gsm packets
	// uint8_t packet[fbuf_size] = { 0x55, 0x06, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0xb8, 0x00, 0x00, 0x2b }; //SIT1
	// uint8_t packet[fbuf_size] = { 0x59, 0x06, 0x1a, 0x15, 0x54, 0x00, 0x00, 0x00, 0x15, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xb8, 0x00, 0x00 };//SIT2
	// uint8_t packet[fbuf_size] = { 0x49, 0x06, 0x03, 0xcf, 0x8f, 0xea, 0x00, 0x00, 0x00, 0x04, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x2b, 0x2b, 0x2b };//SIT2ter
	//uint8_t packet[fbuf_size] = {0x49, 0x06, 0x1b, 0x74, 0x2e, 0x52, 0xf0, 0x10, 0x00, 0xea, 0xc8, 0x00, 0x50, 0x53, 0x65, 0x45, 0x78, 0x00, 0x00, 0x80, 0x00, 0xb0, 0x43}; // SIT 3
	// uint8_t packet[fbuf_size] = { 0x49, 0x06, 0x1b, 0x2c, 0x79, 0x52, 0xf0, 0x99, 0x39, 0xa5, 0xc8, 0x00, 0x28, 0x53, 0xa5, 0x41, 0x78, 0x00, 0x00, 0x80, 0x00, 0xb0, 0x53 };//SIT 3
	// uint8_t packet[fbuf_size] = { 0x41, 0x06, 0x1c, 0x52, 0xf0, 0x10, 0x00, 0xea, 0x65, 0x45, 0x78, 0x00, 0x00, 0x64, 0x51, 0xa3, 0xf8, 0x80, 0x00, 0xb2, 0x2b, 0x2b, 0x2b,0x7e };//SIT 4
	// uint8_t packet[fbuf_size] = { 0x12, 0x06, 0x1d, 0x05, 0x54, 0x00, 0x00, 0x00, 0x11, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };//SIT 5
	// uint8_t packet[fbuf_size] = {0x0b, 0x06, 0x1e, 0xb9, 0xc3, 0x02, 0xf8, 0x01, 0xb5, 0xad, 0x56, 0xff, 0x2b, 0x2b, 0x2c, 0x0e, 0x20, 0x0a, 0x17}; // SIT 6
	