#include <iostream>
#include <stdint.h>
#include "Sibs.h"
using namespace std;



int main() {
	GSMTAPPACK sib;
	//uint8_t packet[23] = { 0x55, 0x06, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0xb8, 0x00, 0x00, 0x2b }; //SIT1
	//uint8_t packet[23] = { 0x59, 0x06, 0x1a, 0x15, 0x54, 0x00, 0x00, 0x00, 0x15, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xb8, 0x00, 0x00 };//SIT2
	//uint8_t packet[23] = { 0x49, 0x06, 0x03, 0xcf, 0x8f, 0xea, 0x00, 0x00, 0x00, 0x04, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x2b, 0x2b, 0x2b };//SIT2ter
	//uint8_t packet[23] = { 0x49, 0x06, 0x1b, 0x74, 0x2e, 0x52, 0xf0, 0x10, 0x00, 0xea, 0xc8, 0x00, 0x50, 0x53, 0x65, 0x45, 0x78, 0x00, 0x00, 0x80, 0x00, 0xb0, 0x43 };//SIT 3
	//uint8_t packet[23] = { 0x49, 0x06, 0x1b, 0x2c, 0x79, 0x52, 0xf0, 0x99, 0x39, 0xa5, 0xc8, 0x00, 0x28, 0x53, 0xa5, 0x41, 0x78, 0x00, 0x00, 0x80, 0x00, 0xb0, 0x53 };//SIT 3
	//uint8_t packet[24] = { 0x41, 0x06, 0x1c, 0x52, 0xf0, 0x10, 0x00, 0xea, 0x65, 0x45, 0x78, 0x00, 0x00, 0x64, 0x51, 0xa3, 0xf8, 0x80, 0x00, 0xb2, 0x2b, 0x2b, 0x2b,0x7e };//SIT 4
	//uint8_t packet[19] = { 0x12, 0x06, 0x1d, 0x05, 0x54, 0x00, 0x00, 0x00, 0x11, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };//SIT 5
	uint8_t packet[19] = { 0x0b, 0x06, 0x1e, 0xb9, 0xc3, 0x02, 0xf8, 0x01, 0xb5, 0xad, 0x56, 0xff, 0x2b, 0x2b, 0x2c, 0x0e, 0x20, 0x0a, 0x17 };//SIT 6

	uint8_t* ptr = packet;
	//общая часть для всех SIT пакетов
	sib.L2PseudoL = (*ptr++ & 0xFC) >> 2;
	sib.ProtDisc = *ptr & 0x0f;
	sib.SkipInd = *ptr & 0xf0;
	sib.MesType = *(++ptr);


	if (sib.MesType == SYSTEM_INFORMATION_TYPE_1) {

		Sib1Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_2) {
		Sib2Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();

	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_2bis) {
		Sib2bisPack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_2ter) {// доделать rest octets
		Sib2terPack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_3) {// доделать rest octets
		Sib3Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_4) {// доделать rest octets
		Sib4Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_5) {
		Sib5Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_5bis) {
		Sib5bisPack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_5ter) {
		Sib5terPack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}
	else if (sib.MesType == SYSTEM_INFORMATION_TYPE_6) {
		Sib6Pack pack;
		memcpy(&pack, &sib, sizeof(GSMTAPPACK));
		bool res = pack.Parse(++ptr);
		pack.printOutput();
	}

	return 0;
}